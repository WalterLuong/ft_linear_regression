import axios from 'axios';
import { ChangeEvent, FormEvent, useEffect, useState } from 'react';
import ScatterPlot from './components/ScatterPlot';
import DatasetTable from './components/DatasetTable';
import useModel from '../hooks/useModel';

const Home = () => {
  const [iterations, setIterations] = useState<number>(100);
  const [learning_rate, setLearningRate] = useState<number>(0.05);
  const { data, loading, error } = useModel('http://localhost:5000/model');
  console.log(data);
  useEffect(() => {
    // Appel de la m√©thode GET pour r√©cup√©rer la valeur actuelle de x au chargement initial
    const fetchData = async () => {
      try {
        const response = await axios.get('http://localhost:5000/values');
        setIterations(response.data.iterations);
        setLearningRate(response.data.learning_rate);
      } catch (error) {
        console.error('Erreur lors de la r√©cup√©ration de x :', error);
      }
    };

    fetchData();
  }, []);

  const [newValue, setNewValue] = useState<number>(100); // Valeur par d√©faut de l'input
  const [newValue2, setNewValue2] = useState<number>(0.05); // Valeur par d√©faut de l'input

  const handleChange = (event: ChangeEvent<HTMLInputElement>) => {
    setNewValue(parseInt(event.target.value, 10));
  };

  const handleChange2 = (event: ChangeEvent<HTMLInputElement>) => {
    setNewValue2(parseInt(event.target.value, 10));
  };

  const handleSubmit = async (event: FormEvent<HTMLFormElement>) => {
    event.preventDefault();
    try {
      await axios.post('http://localhost:5000/modify', {
        iterations: newValue,
        learning_rate: newValue2,
      });
      setIterations(newValue);
      setLearningRate(newValue2);
      console.log('La valeur de x a √©t√© modifi√©e avec succ√®s !');
    } catch (error) {
      console.error('Erreur lors de la modification de x :', error);
    }
  };

  return (
    <div className='lg:px-10 w-full h-max flex flex-col overflow-hidden '>
      <h1 className='my-10 self-center bg-gradient-to-r from-red-600 via-yellow-500 to-red-600 inline-block text-transparent bg-clip-text text-7xl font-bold'>
        FT_LINEAR_REGRESSION
      </h1>
      <p>
        La <span className='font-bold text-red-700'>r√©gression lin√©aire</span>{' '}
        est une technique d'analyse de donn√©es qui pr√©dit la valeur de donn√©es
        inconnues en utilisant une autre valeur de donn√©es apparent√©e et connue.
        Il mod√©lise math√©matiquement la variable inconnue ou d√©pendante et la
        variable connue ou ind√©pendante sous forme d'√©quation lin√©aire. <br />
        <br />
        Dans ce projet, nous allons utiliser la r√©gression lin√©aire pour pr√©dire
        le prix d'une voiture en fonction de son kilom√©trage.
        <br />
        La r√©gression lin√©aire se d√©compose en plusieurs parties :
      </p>
      <ul className='self-center my-10'>
        <a href='#dataset' className='text-xl font-bold'>
          ‚Ä¢ Le dataset
        </a>
        <li className='text-xl font-bold'>‚Ä¢ Le mod√®le</li>
        <li className='text-xl font-bold'>‚Ä¢ La fonction de co√ªt</li>
        <li className='text-xl font-bold'>‚Ä¢ La descente de gradient</li>
      </ul>
      <p>
        Nous expliquerons chacune des parties en illustrant au maximum tout en
        proposant des explications claires.
      </p>
      <h1
        id='dataset'
        className='font-bold text-3xl my-5 w-full shadow-[inset_0px_-25px_15px_-20px_pink]'>
        Le dataset
      </h1>
      <p>
        Pour commencer un projet de Machine Learning, nous avons forc√©ment
        besoin d'un dataset. Le dataset sont les donn√©es que l'on utilisera pour
        entra√Æner notre mod√®le.
        <br />
      </p>
      <p className='mb-5'>
        Le dataset repr√©sente ici les prix de vente de voitures en fonction de
        leur kilom√©trage.
        <br />
        Nous avons le tableau suivant :
      </p>
      <DatasetTable />
      <ScatterPlot />
      <div>
        <p className='flex flex-col'>
          Nous voyons que la r√©partition des donn√©es est lin√©aire. <br />
          Notre mod√®le sera donc le mod√®le lin√©aire suivant : <br />
          <span className=' font-bold self-center'>f(ùë•) = aùë• + b</span>
          <br />
          Nous chercherons les valeurs de a et b.
        </p>
        {iterations && <div>{`Nombre d'it√©rations : ${iterations}`}</div>}
        {learning_rate && <div>{`Learning rate : ${learning_rate}`}</div>}
        <p> Changer les valeurs :</p>
        <form onSubmit={handleSubmit}>
          <label>
            Nouvelle valeur de x :
            <input
              type='number'
              value={newValue.toString()}
              onChange={handleChange}
            />
            <input
              type='number'
              value={newValue2.toString()}
              onChange={handleChange2}
            />
          </label>
          <button type='submit'>Modifier values</button>
        </form>
      </div>
    </div>
  );
};

export default Home;
